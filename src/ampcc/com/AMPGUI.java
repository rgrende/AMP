/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ampcc.com;

//imports
//import javazoom.jl.decoder.JavaLayerException;
import javazoom.jl.decoder.JavaLayerException;
import javazoom.jl.player.Player;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
/*
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.Arrays;

 */


/**
 * @author rakiahgrende
 */
public class AMPGUI extends JFrame {
    private static final String playImage = "/resources/images/playButton.png";
    private static final String pauseImage = "/resources/images/pauseButton.png";
    private static final ImageIcon playIcon = new ImageIcon(MusicPlayer.class.getResource(playImage));
    private static final ImageIcon pauseIcon = new ImageIcon(MusicPlayer.class.getResource(pauseImage));


    private FileInputStream fileInputStream;
    private File myFile = null;
    private String filename;
    private String filePath;
    private long totalLength;//keep this individual
    private long skip;//keep this individual
    private Player player;//from jlayer-1.0.1.jar
    private Thread playThread;//keep this individual
    private float currentVolume = 0F;
    private List<File> musicFiles = new ArrayList<>();
    private int musicFileIndex = 0;
    private DefaultListModel songsToPlay;
    private DBTools db = new DBTools();

    /**
     * Creates new form m
     */
    public AMPGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        DBTools t = new DBTools();
        backPanel2 = new JPanel();
        jScrollPane2 = new JScrollPane();
        playlistList = new JList<>();
        //for (String pl : db.getPlaylistNames()) {playlistList.add(new javax.swing.JLabel(pl));}
        playlists = new JLabel();
        fadeButton = new JButton();
        scrollPane = new JScrollPane();
        songQueue = new JList();
        shuffleButton = new JToggleButton();
        volume = new JSlider();
        queueLabel = new JLabel();
        backPanel = new JScrollPane();
        playlist = new JList<>();
        nowPlaying = new Label();
        playButton = new JButton();
        stopButton = new JButton();
        songName = new JLabel();
        song = new JProgressBar();
        library = new JButton();
        menuBar = new JMenuBar();
        file = new JMenu();
        create = new JMenuItem();
        importSong = new JMenuItem();
        edit = new JMenu();
        clip = new JMenuItem();
        tags = new JMenuItem();
        modify = new JMenu();
        add = new JMenuItem();
        remove = new JMenuItem();
        search = new JMenuItem();
        playMenu = new JMenu();
        selectAll = new JMenuItem();
        help = new JMenu();
        documentation = new JMenuItem();
        backButton = new JButton();
        nextButton = new JButton();
        clearButton = new javax.swing.JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setBackground(new Color(0, 0, 0));

        backPanel2.setBackground(new Color(51, 51, 51));

        playlistList.setBackground(new Color(102, 102, 102));
        playlistList.setModel(new AbstractListModel<String>() {
            final String[] strings = {"Song 1", "Song 2", "Song 3"};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        jScrollPane2.setViewportView(playlistList);

        GroupLayout backPanel2Layout = new GroupLayout(backPanel2);
        backPanel2.setLayout(backPanel2Layout);
        backPanel2Layout.setHorizontalGroup(
                backPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(backPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane2)
                                .addContainerGap())
        );
        backPanel2Layout.setVerticalGroup(
                backPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, backPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
                                .addContainerGap())
        );

        playlists.setFont(new Font("Helvetica", 0, 24)); // NOI18N
        playlists.setText("Playlists");

        fadeButton.setFont(new Font("Helvetica", 0, 18)); // NOI18N
        fadeButton.setText("Fade");
        fadeButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                fadeButtonActionPerformed(evt);
            }
        });

        scrollPane.setBackground(new Color(51, 51, 51));
        scrollPane.setForeground(new Color(51, 51, 51));


        songsToPlay = new DefaultListModel();
        songQueue.setModel(songsToPlay);
        songQueue.addMouseListener(new MouseListener(){
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
                    stopPlaying(true);
                    skip = 0;
                    musicFileIndex = songQueue.getSelectedIndex();
                    playThread = new Thread(runnablePlay);
                    playThread.start();
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
               
            }

            @Override
            public void mouseReleased(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {

            }

            @Override
            public void mouseExited(MouseEvent e) {

            }

        });


        /*songQueue.setModel(new javax.swing.AbstractListModel<String>() {
            final String[] strings = {};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });

         */


        scrollPane.setViewportView(songQueue);


        shuffleButton.setFont(new Font("Helvetica", 0, 18)); // NOI18N
        shuffleButton.setText("Shuffle");
        shuffleButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                shuffleButtonActionPerformed(evt);
            }
        });


        queueLabel.setFont(new Font("Helvetica", 0, 24)); // NOI18N
        queueLabel.setText("  Current Queue");

        playlist.setBackground(new Color(51, 0, 153));
        playlist.setBorder(null);
        playlist.setFont(new Font("Helvetica", 0, 14)); // NOI18N
        playlist.setForeground(new Color(255, 255, 255));
        playlist.setModel(new AbstractListModel<String>() {
            final String[] strings = t.getPlaylistNames();

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        playlist.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                playlistMouseClicked(evt);
            }
        });
        backPanel.setViewportView(playlist);

        nowPlaying.setFont(new Font("Helvetica", 0, 24)); // NOI18N
        nowPlaying.setForeground(new Color(0, 0, 0));
        //nowPlaying.setName(""); // NOI18N
        nowPlaying.setText("Now Playing:");

        playButton.setIcon(playIcon);
        playButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        volume.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent evt) {
                volumeControl(volume.getValue());
            }
        });

        volumeControl(volume.getValue());

        stopButton.setIcon(new ImageIcon(getClass().getResource("/resources/images/stopIcon.png"))); // NOI18N
        stopButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                stopButtonActionPerformed();
            }
        });

        library.setIcon(new ImageIcon(getClass().getResource("/resources/images/musicFolderIcon.png"))); // NOI18N
        library.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                libraryActionPerformed(evt);
            }
        });

        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/back.png"))); // NOI18N
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/next.png"))); // NOI18N
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        file.setText("File");
        file.setFont(new Font("Helvetica", 0, 14)); // NOI18N

        create.setText("Create");
        create.setToolTipText("");
        create.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        file.add(create);

        importSong.setText("Import");
        file.add(importSong);

        menuBar.add(file);

        edit.setText("Edit");
        edit.setFont(new Font("Helvetica", 0, 14)); // NOI18N

        clip.setText("Clip");
        edit.add(clip);

        tags.setText("Tags");
        edit.add(tags);

        menuBar.add(edit);

        modify.setText("Modify");
        modify.setFont(new Font("Helvetica", 0, 14)); // NOI18N

        add.setText("Add");
        modify.add(add);

        remove.setText("Remove");
        modify.add(remove);

        search.setText("Search");
        modify.add(search);

        menuBar.add(modify);

        playMenu.setText("Play");
        playMenu.setFont(new Font("Helvetica", 0, 14)); // NOI18N

        selectAll.setText("Select All");
        playMenu.add(selectAll);

        menuBar.add(playMenu);

        help.setText("Help");
        help.setFont(new Font("Helvetica", 0, 14)); // NOI18N

        documentation.setText("Documentation");
        help.add(documentation);

        menuBar.add(help);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(13, 13, 13)
                                                .addComponent(backPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(backPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(79, 79, 79)
                                                .addComponent(nowPlaying, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(songName, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 8, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(song, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(24, 24, 24)
                                                .addComponent(playlists, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(15, 15, 15)
                                                                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(128, 128, 128)
                                                                .addComponent(queueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(75, 75, 75)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(volume, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                                .addGroup(layout.createSequentialGroup()
                                                                                        .addComponent(shuffleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addGap(8, 8, 8)
                                                                                        .addComponent(fadeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addGap(30, 30, 30)
                                                                                        .addComponent(library, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                .addGroup(layout.createSequentialGroup()
                                                                                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addGap(18, 18, 18)
                                                                                        .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addGap(18, 18, 18)
                                                                                        .addComponent(nextButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                                                .addContainerGap(16, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(162, 162, 162))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(15, 15, 15)
                                                .addComponent(volume, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(1, 1, 1))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(26, 26, 26)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(songName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(nowPlaying, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(16, 16, 16)
                                                .addComponent(song, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(26, 26, 26)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(shuffleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(fadeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(library, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(50, 50, 50)
                                                .addComponent(queueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(playlists, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(backPanel)
                                                        .addComponent(backPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void stopPlaying(boolean clearSong) {
        //stops audio line
        if (player != null) {
            Player p = player;
            player = null;
            p.close();
            playButton.setIcon(playIcon);
            if (clearSong) {
                songName.setText("");
            }
        }
    }


    private void createActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void playlistMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        // get songs from playlist via database
        // populate song list with songs
        // update screen
    }
    private void queueListMouseClicked(java.awt.event.MouseEvent evt) {

    }

    private void libraryActionPerformed(java.awt.event.ActionEvent evt){
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home") + System.getProperty("file.separator") + "git/AMP/songs"));
        fileChooser.setDialogTitle("Select Music");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setFileFilter(new FileNameExtensionFilter("AAC files", "aac"));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Wav files", "wav"));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Mp3 files", "mp3"));
        fileChooser.setMultiSelectionEnabled(true);
        if (fileChooser.showOpenDialog(library) == JFileChooser.APPROVE_OPTION) {
            Collections.addAll(musicFiles, fileChooser.getSelectedFiles());
            updateQueue();
        }
        //update GUi

    }


    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //code for play button
        if (playButton.getIcon() == playIcon) {
            playThread = new Thread(runnablePlay);
            playThread.start();
        } else {
            player.isComplete();
            try {
                skip = totalLength - fileInputStream.available();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            stopPlaying(false);
        }
    }

    private void stopButtonActionPerformed(){
        //code for stop button
        stopPlaying(true);
    }


    private void shuffleButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //code for shuffle button
        Collections.shuffle(musicFiles, new Random());
        updateQueue();
    }

    private void fadeButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //code for fade button
        Runnable fadeRunnable = new Runnable() {
            @Override
            public void run() {
                float decrease = currentVolume / 20; //slow down every quarter second by 1/20 for five seconds
                float origVolume = currentVolume;
                while (currentVolume > 0) {
                    volumeControl(currentVolume - decrease);
                    try {
                        Thread.sleep(250);
                    } catch (InterruptedException ignored) {

                    }
                }
                stopButtonActionPerformed();
                volumeControl(origVolume);
            }
        };
        Thread t = new Thread(fadeRunnable);
        t.start();
    }

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt){
        //code for back button
        if (player != null) {
            stopPlaying(true);
            skip = 0;
            musicFileIndex--;
            if (musicFileIndex < 0) {
                musicFileIndex = musicFiles.size()-1;
            }
            playThread = new Thread(runnablePlay);
            playThread.start();
        }
    }

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt){
        //code for next button
        if (player != null) {
            stopPlaying(true);
            skip = 0;
            musicFileIndex++;
            if (musicFileIndex >= musicFiles.size()) {
                musicFileIndex = 0;
            }
            playThread = new Thread(runnablePlay);
            playThread.start();
        }
    }

    private void clearButtonActionPerformed(ActionEvent evt) {
        //code for clear button
        musicFiles.clear();
        updateQueue();
    }


    public void volumeControl(float volume) {
        //code for volume
        currentVolume = volume;
        if (player != null) {
            float value = volume/100.0f;
            float dB = (float)(Math.log(value)/Math.log(10.0)*20.0);
            player.setVolume(dB);
        }

    }

    private void updateQueue() {
        //code that updates the current queue
        songsToPlay.clear();
        for (File f : musicFiles) {
            String filename = f.getName();
            int index = filename.lastIndexOf(".");
            String displayName = filename;
            if (index > 0) {
                displayName = displayName.substring(0, index);
            }
            songsToPlay.addElement(displayName);
        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold default state="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AMPGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AMPGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AMPGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AMPGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AMPGUI().setVisible(true);
            }
        });
    }
    //</editor-fold>
    //</editor-fold>


    Runnable runnablePlay = new Runnable() {
         @Override
         public void run() {
             //while there are songs in the queue, play
             for (; musicFileIndex < musicFiles.size(); musicFileIndex++) {
                 if (!playNextSong())
                     break;
             }
             /*
             for (File nextSong : musicFiles) {
                 myFile = nextSong;
                 System.out.println("test");
             }
              */
         }
     };

     private boolean playNextSong() {
         if (musicFileIndex < 0 || musicFileIndex >= musicFiles.size())
             return false;
         myFile = musicFiles.get(musicFileIndex);
         boolean played = false;
         try {
             fileInputStream = new FileInputStream(myFile);
             totalLength = fileInputStream.available();
             BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream);
             player = new Player(bufferedInputStream);
             fileInputStream.skip(skip);
             playButton.setIcon(pauseIcon);
             String displayName = myFile.getName();
             int index = displayName.lastIndexOf(".");
             if (index > 0) {
                 displayName = displayName.substring(0,index);
             }
             songName.setText(displayName);
             player.play(); //This starts playing the selected music file
             played = player != null;
             stopPlaying(played);

         } catch (FileNotFoundException e) {
             e.printStackTrace();
         } catch (JavaLayerException e) {
             e.printStackTrace();
         } catch (IOException e) {
             e.printStackTrace();
         }
         return played;
     }

    // Variables declaration - do not modify
    private javax.swing.JMenuItem add;
    private javax.swing.JButton backButton;
    private javax.swing.JScrollPane backPanel;
    private javax.swing.JPanel backPanel2;
    private javax.swing.JMenuItem clip;
    private javax.swing.JMenuItem create;
    private javax.swing.JButton clearButton;
    private javax.swing.JMenuItem documentation;
    private javax.swing.JMenu edit;
    private javax.swing.JButton fadeButton;
    private javax.swing.JMenu file;
    private javax.swing.JMenu help;
    private javax.swing.JMenuItem importSong;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton library;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu modify;
    private javax.swing.JButton nextButton;
    private java.awt.Label nowPlaying;
    private javax.swing.JButton playButton;
    private javax.swing.JMenu playMenu;
    private javax.swing.JList<String> playlist;
    private javax.swing.JList<String> playlistList;
    private javax.swing.JLabel playlists;
    private javax.swing.JLabel queueLabel;
    private javax.swing.JList<String> songQueue;
    private javax.swing.JMenuItem remove;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JMenuItem search;
    private javax.swing.JMenuItem selectAll;
    private javax.swing.JToggleButton shuffleButton;
    private javax.swing.JProgressBar song;
    private javax.swing.JLabel songName;
    private javax.swing.JButton stopButton;
    private javax.swing.JMenuItem tags;
    private javax.swing.JSlider volume;
    // End of variables declaration
}


