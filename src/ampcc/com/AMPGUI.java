//Rakiah Grende, Robert Hereth, Elaine Schultz
//CS-430-A-2023SP Senior Project
//Professor Nate Williams
/**
 * This is the Spring 2023 Senior Project program that mimics that of Sound Director. Sound Director is an application
 * that many schools use as their main media source for sporting events. The Carroll College Athletic Department uses
 * an older version of Sound Director currently and is open to the idea of switching to a different program. The goal of
 * this project was to create a music player with all the best features of Sound Director and then add new desired
 * features as well.
 */
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

//package
package ampcc.com;

//imports
//import javazoom.jl.decoder.JavaLayerException;
import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.themes.FlatMacDarkLaf;
import javazoom.jl.decoder.JavaLayerException;
import javazoom.jl.player.Player;
import org.h2.command.ddl.DeallocateProcedure;

import javax.swing.*;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.MenuKeyListener;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;
import java.awt.*;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragGestureRecognizer;
import java.awt.dnd.DragSource;
import java.awt.dnd.DragSourceDragEvent;
import java.awt.dnd.DragSourceDropEvent;
import java.awt.dnd.DragSourceEvent;
import java.awt.dnd.DragSourceListener;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import javax.swing.TransferHandler;


/*
    Source of Flatlaf for the Dark and Light Theme to be possible and a brief start on how to get use it.
    https://www.formdev.com/flatlaf/
    https://www.formdev.com/flatlaf/themes/
 */

import static ampcc.com.DBTools.initialize;
import static ampcc.com.DBTools.test;

import static com.formdev.flatlaf.FlatLaf.updateUILater;

/**
 * @author Rakiah Grende, Robert Hereth, and Elaine Schultz
 */
public class AMPGUI extends JFrame {
    //class variables
    private static final String playImage = "/resources/images/playButton.png";
    private static final String pauseImage = "/resources/images/pauseButton.png";
    private static final ImageIcon playIcon = new ImageIcon(MusicPlayer.class.getResource(playImage));
    private static final ImageIcon pauseIcon = new ImageIcon(MusicPlayer.class.getResource(pauseImage));
    // Added in RadioButtonMenuItems and ButtonGroup.
    private JRadioButtonMenuItem[] themeItems; // This is the theme menu item.
    private ButtonGroup themeModeBtnGrp; // This manages the theme menu items.
    private FileInputStream fileInputStream;
    private File myFile = null;
    private String filename;
    private String filePath;
    private long totalLength;//keep this individual
    private long skip;//keep this individual
    private Player player;//from jlayer-1.0.1.jar
    private Thread playThread;//keep this individual
    private float currentVolume = 0F;
    private final List<File> musicFiles = new ArrayList<>();
    private int musicFileIndex = 0;
    private DefaultListModel songsToPlay;
    private final DBTools db = new DBTools();
    /**
     * Creates new form m
     */
    //adding all the UI components
    public AMPGUI() {
        initComponents(); // Creates the UI components.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        backPanel2 = new JPanel();
        scrollPane2 = new JScrollPane();
        playlistList = new JList<>();
        //for (String pl : db.getPlaylistNames()) {playlistList.add(new javax.swing.JLabel(pl));}
        playlists = new JLabel();
        fadeButton = new JButton();
        scrollPane = new JScrollPane();
        songQueue = new JList();
        shuffleButton = new JToggleButton();
        nextButton = new JButton();
        backButton = new JButton();
        clearButton = new JButton();
        volume = new JSlider();
        queueLabel = new JLabel();
        backPanel = new JScrollPane();
        playlist = new JList<>();
        nowPlaying = new Label();
        playButton = new JButton();
        stopButton = new JButton();
        addSongsButton = new JButton();
        songName = new JLabel();
        song = new JProgressBar();
        library = new JButton();
        menuBar = new JMenuBar();
        file = new JMenu();
        create = new JMenu(); // Changed from JMenuItem to a JMenu.
        importSong = new JMenuItem();
        edit = new JMenu();
        clip = new JMenuItem();
        tags = new JMenuItem();
        addPlaylist = new JMenuItem(); // added in 2 JMenuItems -Elaine @ 20230428
        removePlaylist = new JMenuItem();
        modify = new JMenu();
        add = new JMenuItem();
        remove = new JMenuItem();
        search = new JMenuItem();
        playMenu = new JMenu();
        selectAll = new JMenuItem();
        help = new JMenu();
        documentation = new JMenuItem();
        about = new JMenuItem(); // added in 3 JMenuItems and 1 JMenu -Elaine @ 20230331
        preferences = new JMenu();
        theme = new JMenu(); // changed JMenuItem to JMenu.
        newPlaylist = new JMenuItem(); // added in 4 JMenuItems -Elaine @ 20230406
        newTag = new JMenuItem();
        newScreen = new JMenuItem();
        newSong = new JMenuItem();
        exit = new JMenuItem(); // added in exit JMenuItem.
        volumeUp = new JLabel();
        muteButton = new JToggleButton();
        popupMenuCQ = new JPopupMenu();
        popupMenuPL = new JPopupMenu();
        playlistPopupMenu = new JPopupMenu();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setBackground(new Color(0, 0, 0));

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setBackground(new Color(0, 0, 0));
        backPanel2.setBackground(new Color(242, 242, 242));

        JMenuItem removeSong = new JMenuItem("Remove from Queue");
        JMenuItem addSong = new JMenuItem("Add to Queue");
        JMenuItem importSongsToPlaylist = new JMenuItem("Import Songs");
        popupMenuPL.add(addSong);
        addSong.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addSong();
            }
        });
        popupMenuCQ.add(removeSong);
        removeSong.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                removeSong();
            }
        });
        playlistPopupMenu.add(importSongsToPlaylist);
        importSongsToPlaylist.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new ModPlaylist(playlist.getModel().getElementAt(playlist.getSelectedIndex()));
            }
        });

        playlistList.setBackground(new Color(102, 102, 102));
        playlistList.setDragEnabled(true);
        playlistList.setTransferHandler(new TransferHandler(){
            //potential drag and drop
        });
        playlistList.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    showPopup2(e);
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });

        playlistList.setModel(new AbstractListModel<String>() {
            final String[] strings = {""};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });


        scrollPane2.setViewportView(playlistList);

        GroupLayout backPanel2Layout = new GroupLayout(backPanel2);
        backPanel2.setLayout(backPanel2Layout);
        backPanel2Layout.setHorizontalGroup(
                backPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(backPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(scrollPane2)
                                .addContainerGap())
        );
        backPanel2Layout.setVerticalGroup(
                backPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, backPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(scrollPane2, GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                                .addContainerGap())
        );

        playlists.setFont(new Font("Helvetica", 0, 24)); // NOI18N
        playlists.setText("Playlists");

        fadeButton.setFont(new Font("Helvetica", 0, 18)); // NOI18N
        fadeButton.setText("Fade");
        fadeButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                fadeButtonActionPerformed(evt);
            }
        });

        scrollPane.setBackground(new Color(51, 51, 51));
        scrollPane.setForeground(new Color(51, 51, 51));

        songsToPlay = new DefaultListModel();
        songQueue.setModel(songsToPlay);
        songQueue.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
                    stopPlaying(true);
                    skip = 0;
                    musicFileIndex = songQueue.getSelectedIndex();
                    playThread = new Thread(runnablePlay);
                    playThread.start();
                }
            }
            @Override
            public void mousePressed(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    showPopup1(e);
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {

            }

            @Override
            public void mouseExited(MouseEvent e) {

            }
        });

        scrollPane.setViewportView(songQueue);

        shuffleButton.setFont(new Font("Helvetica", 0, 18)); // NOI18N
        shuffleButton.setText("Shuffle");
        shuffleButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                shuffleButtonActionPerformed(evt);
            }
        });

        queueLabel.setFont(new Font("Helvetica", 0, 24)); // NOI18N
        queueLabel.setText("    Current Queue");

        playlist.setBackground(new Color(153, 153, 153));
        playlist.setBorder(null);
        playlist.setFont(new Font("Helvetica", 0, 14)); // NOI18N
        playlist.setForeground(new Color(255, 255, 255));
        playlist.setModel(new AbstractListModel<String>() {
            final String[] strings = db.getPlaylistNames();

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        playlist.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                playlistMouseClicked(evt);
            }
        });
        playlist.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {

            }

            @Override
            public void mousePressed(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    showPopup3(e);
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {

            }

            @Override
            public void mouseExited(MouseEvent e) {

            }
        });
        backPanel.setViewportView(playlist);

        nowPlaying.setFont(new Font("Helvetica", 0, 28)); // NOI18N
        nowPlaying.setForeground(new Color(0, 0, 0));

        //nowPlaying.setName(""); // NOI18N
        nowPlaying.setText("Now Playing: ");

        playButton.setIcon(playIcon);
        playButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        volume.addChangeListener(new ChangeListener() { // inner class
            @Override
            public void stateChanged(ChangeEvent evt) {
                volumeControl(volume.getValue());
            }
        });

        volumeControl(volume.getValue());

        stopButton.setIcon(new ImageIcon(getClass().getResource("/resources/images/stopIcon.png"))); // NOI18N
        stopButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                stopButtonActionPerformed();
            }
        });

        library.setIcon(new ImageIcon(getClass().getResource("/resources/images/musicFolderIcon.png"))); // NOI18N
        library.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                libraryActionPerformed(evt);
            }
        });


        // The file JMenu.
        file.setText("File");
        file.setFont(new Font("Helvetica", 0, 14)); // NOI18N
        file.setMnemonic(KeyEvent.VK_F); // Added in Mnemonic to F.

        // Made changes to create as SubMenu format. And added in JMenuItems for Create.
        create.setText("Create"); // Changed from JMenu to a JMenuItems to be a SubMenu.
        create.setFont(new Font("Helvetica", 0, 14)); // NOI18N
        create.setMnemonic(KeyEvent.VK_C); // Changed setToolTipText into a setMnemonic to C.
        create.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        backButton.setIcon(new ImageIcon(getClass().getResource("/resources/images/back.png"))); // NOI18N
        backButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        nextButton.setIcon(new ImageIcon(getClass().getResource("/resources/images/next.png"))); // NOI18N
        nextButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        clearButton.setFont(new Font("Helvetica Neue", 0, 18)); // NOI18N
        clearButton.setText("Clear");
        clearButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        volumeUp.setIcon(new ImageIcon(getClass().getResource("/resources/images/volume.png"))); // NOI18N
        muteButton.setIcon(new ImageIcon(getClass().getResource("/resources/images/mute.png"))); // NOI18N
        muteButton.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent itemEvent) {
                int state = itemEvent.getStateChange();
                if (state == itemEvent.SELECTED) {
                    volumeControl(0.0f);
                } else {
                    volumeControl(volume.getValue());
                }
            }
        });

        addSongsButton.setFont(new Font("Helvetica Neue", 0, 18));
        addSongsButton.setText("Add to Queue");
        addSongsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addSong();
            }
        });

        file.setText("File");
        file.setFont(new Font("Helvetica", 0, 14)); // NOI18N

        create.setText("Create");
        create.setToolTipText("");
        create.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        // The JMenuItems for SubMenu Create.
        newPlaylist.setText("New Playlist");
        newPlaylist.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        newPlaylist.setMnemonic(KeyEvent.VK_A); // Added in Mnemonic to a.
        newTag.setText("New Tag");
        newTag.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        newTag.setMnemonic(KeyEvent.VK_T); // Added in Mnemonic to t.
        newScreen.setText("New Screen");
        newScreen.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        newScreen.setMnemonic(KeyEvent.VK_R); // Added in Mnemonic to r.
        newSong.setText("New Song");
        newSong.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        newSong.setMnemonic(KeyEvent.VK_S); // Added in Mnemonic to s.



        file.add(create);
        create.add(newPlaylist);
        //create.add(newTag);
        //create.add(newScreen);
        create.add(newSong);
        create.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });

        importSong.setText("Import");
        importSong.setFont(new Font("Helvetica", 0, 14)); // NOI18N
        importSong.setMnemonic(KeyEvent.VK_R); // Added in Mnemonic to r.
        file.add(importSong);
        importSong.addActionListener(new ActionListener() {
            @Override
            //this is the wrong way of importing music
            public void actionPerformed(ActionEvent e) {
                libraryActionPerformed(e);
            }
        });

        // Added in the Exit application JMenuItem.
        exit.setText("Exit");
        exit.setFont(new Font("Helvetica", 0, 14)); // NOI18N
        exit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, KeyEvent.CTRL_DOWN_MASK));
        file.add(exit);

        // Under Create JMenu, added in Action Performed for a new Playlist.
        newPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlaylistActionPerformed(evt);
            }
        });

        // Under Create JMenu, added in Action Performed for a new Song.
        newSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSongActionPerformed(evt);
            }
        });

        // Added in Action Performed for Exit.
        exit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        menuBar.add(file);

        // The Edit JMenu and its JMenuItems.
        edit.setText("Edit");

        edit.setFont(new Font("Helvetica", 0, 14)); // NOI18N
        edit.setMnemonic(KeyEvent.VK_E); // Added in Mnemonic to e.

        clip.setText("Clip");
        clip.setFont(new Font("Helvetica", 0, 14)); // NOI18N
        clip.setMnemonic(KeyEvent.VK_C); // Added in Mnemonic to c.
        edit.add(clip);

        tags.setText("Tags");
        tags.setFont(new Font("Helvetica", 0, 14)); // NOI18N
        tags.setMnemonic(KeyEvent.VK_S); // Added in Mnemonic to c.
        edit.add(tags);

        addPlaylist.setText("Add Playlist");
        addPlaylist.setFont(new Font("Helvetica", 0, 14)); // NOI18N
        addPlaylist.setMnemonic(KeyEvent.VK_A);
        edit.add(addPlaylist);

        removePlaylist.setText("Remove Playlist");
        removePlaylist.setFont(new Font("Helvetica", 0, 14)); // NOI18N
        removePlaylist.setMnemonic(KeyEvent.VK_R);
        edit.add(removePlaylist);

        menuBar.add(edit);

        modify.setText("Modify");

        modify.setFont(new Font("Helvetica", 0, 14)); // NOI18N
        modify.setMnemonic(KeyEvent.VK_D);


        add.setText("Add Song");
        add.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        modify.add(add);

        remove.setText("Remove Song");
        remove.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N

        modify.add(remove);

        search.setText("Search");
        search.setFont(new Font("Helvetica", 0, 14)); // NOI18N
        modify.add(search);

        menuBar.add(modify);

        playMenu.setText("Play");
        playMenu.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N

        playMenu.setMnemonic(KeyEvent.VK_A); // Added in Mnemonic to a.

        selectAll.setText("Select All");
        selectAll.setFont(new Font("Helvetica", 0, 14)); // NOI18N
        playMenu.add(selectAll);

        menuBar.add(playMenu);

        /* Added in new JMenu and its JMenu Items for Preferences. */
        preferences.setText("Preferences");
        preferences.setFont(new Font("Helvetica", 0, 14)); // NOI18N
        preferences.setMnemonic(KeyEvent.VK_R);

        theme.setText("Theme");
        theme.setFont(new Font("Helvetica", 0, 14)); // NOI18N
        theme.setMnemonic(KeyEvent.VK_E);
        preferences.add(theme);

        // Adding in radiobutton format.
        String[] themeNames = {"Light Mode", "Dark Mode"}; // Creates the string theme names.
        // Creates the radio button menu items for the theme names.
        themeItems = new JRadioButtonMenuItem[themeNames.length];
        themeModeBtnGrp = new ButtonGroup(); // This manages the theme names.
        ThemeModeHandler themeModeHandler = new ThemeModeHandler(); // Handles the theme.

        // Creates the Theme radio button menu items.
        for (int count = 0; count < themeItems.length; count++) {
            themeItems[count] = new JRadioButtonMenuItem(themeNames[count]);
            theme.add(themeItems[count]); // This adds the font menu.
            themeModeBtnGrp.add(themeItems[count]); // This adds to the button group.
            themeItems[count].addActionListener(themeModeHandler); // This adds the themeHandler
        }

        themeItems[0].setSelected(true); // Selects the first theme from the menu item.
        themeItems[0].setFont(new Font("Helvetica", 0, 14)); // NOI18N
        themeItems[1].setFont(new Font("Helvetica", 0, 14)); // NOI18N

        menuBar.add(preferences);

        help.setText("Help");

        help.setFont(new Font("Helvetica", 0, 14)); // NOI18
        help.setMnemonic(KeyEvent.VK_H);

        documentation.setText("Documentation");
        documentation.setFont(new Font("Helvetica", 0, 14)); // NOI18
        documentation.setMnemonic(KeyEvent.VK_D);
        help.add(documentation);

        /* Added in action listener and its method for documentation MenuItem. */
        documentation.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                documentationActionPerformed(evt);
            }
        });

        /* Added in the About JMenuItem, its Action Listener and its method. */
        about.setText("About...");
        about.setFont(new Font("Helvetica", 0, 14)); // NOI18
        about.setMnemonic(KeyEvent.VK_A);
        help.add(about);

        about.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });

        menuBar.add(help);
        setJMenuBar(menuBar);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(song, GroupLayout.PREFERRED_SIZE, 468, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(backPanel, GroupLayout.PREFERRED_SIZE, 127, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(backPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(33, 33, 33)
                                                                .addComponent(nowPlaying, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(1, 1, 1)
                                                                .addComponent(songName, GroupLayout.PREFERRED_SIZE, 335, GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(24, 24, 24)
                                                                .addComponent(playlists, GroupLayout.PREFERRED_SIZE, 144, GroupLayout.PREFERRED_SIZE)))
                                                .addGap(0, 33, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(49, 49, 49)
                                                .addComponent(muteButton, GroupLayout.PREFERRED_SIZE, 68, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(volume, GroupLayout.PREFERRED_SIZE, 275, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(12, 12, 12)
                                                                .addComponent(volumeUp))
                                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                                .addGroup(layout.createSequentialGroup()
                                                                        .addComponent(backButton, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)
                                                                        .addGap(18, 18, 18)
                                                                        .addComponent(playButton, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(stopButton, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
                                                                        .addGap(18, 18, 18)
                                                                        .addComponent(nextButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                .addGroup(layout.createSequentialGroup()
                                                                        .addGap(2, 2, 2)
                                                                        .addComponent(shuffleButton, GroupLayout.PREFERRED_SIZE, 92, GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(fadeButton, GroupLayout.PREFERRED_SIZE, 84, GroupLayout.PREFERRED_SIZE)
                                                                        .addGap(18, 18, 18)
                                                                        .addComponent(library, GroupLayout.PREFERRED_SIZE, 68, GroupLayout.PREFERRED_SIZE)))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(111, 111, 111)
                                                .addComponent(queueLabel, GroupLayout.PREFERRED_SIZE, 233, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(174, 174, 174)
                                                .addComponent(clearButton, GroupLayout.PREFERRED_SIZE, 92, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, 405, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(30, 30, 30)
                                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                                        .addComponent(nowPlaying, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(songName, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addContainerGap()
                                                                .addComponent(muteButton, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)))
                                                .addGap(16, 16, 16)
                                                .addComponent(song, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(16, 16, 16)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(volumeUp, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(volume, GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                                .addComponent(backButton, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(playButton, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(stopButton, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(nextButton, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(1, 1, 1)))))
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                //.addGap(javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE)
                                                .addComponent(playlists, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(backPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(backPanel)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(18, 18, 18)
                                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(shuffleButton, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(fadeButton, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)))
                                                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(library, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)))
                                                .addGap(35, 35, 35)
                                                .addComponent(queueLabel, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, 346, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(clearButton, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(74, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>


    /* This method creates a Playlist Add form. */
    private void addPlaylistActionPerformed(java.awt.event.ActionEvent evt) {
        new AddNewPlaylist();
    }

    /* This method creates a Song Add form. */
    private void addSongActionPerformed(java.awt.event.ActionEvent evt) {
        new AddNewSong();
    }

    /*   This method is an Action Event to open our documentation PDF file
     This may subject to change. I will see if I can adjust this to
     open in a web browser or some other method to open externally.
     Otherwise, this will be left as is.
     */
    private void documentationActionPerformed(java.awt.event.ActionEvent evt) {
        if (Desktop.isDesktopSupported()) {
            try {
                File docFile = new File("documentation/AMP_Documentation.pdf");
                Desktop.getDesktop().open(docFile);
            } catch (IOException ex) {
                // no application registered for PDFs
            }
        }
    }

    /**
     * Updated this JFrame. Need to retest Internal JFrame again later on.
     * @param evt
     */
    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {
        JFrame abtFrame = new JFrame();
        JPanel abtPane = new JPanel();
        JPanel rows = new JPanel();

        abtFrame.setTitle("About AMP");

        abtFrame.setSize(505, 125);
        JLabel abtLbl = new JLabel(" AMP (Athlete Music Player) is a DJ application created for Carroll College’s sports programs. ");
        JLabel createdByLbl = new JLabel(" AMP was created by Rakiah Grende, Robert Hereth, and Elaine Schultz. ");
        JLabel copyRightLbl = new JLabel(" @ 2023 Carroll College. ");


        // Add in the components
        abtPane.setLayout(new BorderLayout());
        abtPane.setLayout(new GridLayout(3, 1));
        abtFrame.add(abtPane, BorderLayout.CENTER); // add the panel in the frame
        rows.setLayout(new GridLayout(3, 1));
        rows.add(abtLbl);
        rows.add(createdByLbl);
        rows.add(copyRightLbl);

        abtFrame.add(rows, BorderLayout.CENTER);
        abtFrame.setResizable(false);
        abtFrame.setVisible(true);
        abtFrame.setAlwaysOnTop(true);
        abtFrame.setLocationRelativeTo(null);
    }

    /**
     An action to perform Exit application.
     */
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(0);
    }

    /**
     This method stops the player at its current position and changes the play icon to pause. Used to pause songs in the
     queue.
     */
    private void stopPlaying(boolean clearSong) {
        //stops audio line
        if (player != null) {
            Player p = player;
            player = null;
            p.close();
            playButton.setIcon(playIcon);
            if (clearSong) {
                songName.setText("");
                song.setValue(0);
            }
        }
    }

    private void createActionPerformed(java.awt.event.ActionEvent evt) {

    }

    /**
     *
     * @param evt
     */
    private void playlistMouseClicked(MouseEvent evt) {
        String p_name = playlist.getModel().getElementAt(playlist.getSelectedIndex());
        String id = db.getPlaylistID(p_name);
        String[] songs = db.getSongPlaylist(id);

        playlistList.setModel(new javax.swing.AbstractListModel<String>() {
            final String[] strings = songs;

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        scrollPane2.setViewportView(playlistList);

    }

    /**
     This method allows users to choose what types of music to play within their local machine. If the user have .mp3
     files on their local machine, they will be options for the user to choose to select to add the program. After
     selecting the desired songs, the current queue will populate with those songs.
     @param evt
     */
    private void libraryActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home") + System.getProperty("file.separator") + "git/AMP/songs"));
        fileChooser.setDialogTitle("Select Music");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setFileFilter(new FileNameExtensionFilter("Mp3 files", "mp3"));
        fileChooser.setMultiSelectionEnabled(true);
        if (fileChooser.showOpenDialog(library) == JFileChooser.APPROVE_OPTION) {
            Collections.addAll(musicFiles, fileChooser.getSelectedFiles());
            updateQueue();
        }
        //update GUi
    }
/*
    private boolean importSongs(TransferHandler.TransferSupport songs) {
        if (playlistList != null) {
            JList playlistList = (JList) songs.getComponent();
            DefaultListModel listModel = (DefaultListModel) playlistList.getModel();
            JList.DropLocation dl = (JList.DropLocation) songs.getDropLocation();
            int index = dl.getIndex();
            boolean insert = dl.isInsert();

        }
        return true;
    }
 */
    /**
     This method is responsible for the play button and its functionality. If the user presses the play JButton the
     first song in the current queue will play. After a song is paused, this method will resume the song.
     @param evt
     */
    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //code for play button
        if (playButton.getIcon() == playIcon) {
            playThread = new Thread(runnablePlay);
            playThread.start();
        } else {
            player.isComplete();
            try {
                skip = totalLength - fileInputStream.available();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            stopPlaying(false);
        }
    }

    /**
     This method is linked to the stop button in the program. If the user clicks the JButton labeled "stop" and there is
     song currently playing, the song will stop.
     */
    private void stopButtonActionPerformed() {
        //code for stop button
        stopPlaying(true);
    }

    /**
     This method randomized the songs in the current queue using java's random import and then updates the queue after
     the songs have been randomized.
     @param evt
     */
    private void shuffleButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //code for shuffle button
        Collections.shuffle(musicFiles, new Random());
        updateQueue();
    }

    /**
     One of the requirements for the program. This method allows the user to fade OUT of the current song that is being
     played. It has its own runnable as it relies on a new thread to end the song. The method essentially decreases the
     volume by a quarter of a second over a five-second duration period.
     @param evt
     */
    private void fadeButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //code for fade button
        Runnable fadeRunnable = new Runnable() {
            @Override
            public void run() {
                float decrease = currentVolume / 12; //slow down every quarter second by 1/20 for three seconds
                float origVolume = currentVolume;
                while (currentVolume > 0) {
                    volumeControl(currentVolume - decrease);
                    try {
                        Thread.sleep(250);
                    } catch (InterruptedException ignored) {

                    }
                }
                stopButtonActionPerformed();
                volumeControl(origVolume);
            }
        };
        Thread t = new Thread(fadeRunnable);
        t.start();
    }

    /**
     This method is responsible for the back button and allows the user to go back to a previous song in the queue as this
     method also keeps track of song position.
     @param evt
     */
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //code for back button
        if (player != null) {
            stopPlaying(true);
            skip = 0;
            musicFileIndex--;
            if (musicFileIndex < 0) {
                musicFileIndex = musicFiles.size() - 1;
            }
            playThread = new Thread(runnablePlay);
            playThread.start();
        }
    }
    /**
     This method is responsible for the functionality of the next button in th GUI. If the user wishes to switch songs in the
     queue, the next button will play the next song in the next position, keeping track of all the indices of each song. Once
     the user has reached the end of the queue, this method will circle back to the song in the first position.
     @param evt
     */
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //code for next button
        if (player != null) {
            stopPlaying(true);
            skip = 0;
            musicFileIndex++;
            if (musicFileIndex >= musicFiles.size()) {
                musicFileIndex = 0;
            }
            playThread = new Thread(runnablePlay);
            playThread.start();
        }
    }

    /**
     This method refers to the array list that keeps track of all the songs the user has selected to played in the
     current queue. If the user wishes to clear both the array list and JList, the clear button will do so.
     @param evt
     */
    private void clearButtonActionPerformed(ActionEvent evt) {
        //code for clear button
        musicFiles.clear();
        updateQueue();
        //TODO: set text to be null if queue and player are empty.
    }

    /**
     This method controls thw volume of the program with the use of a JSlider. The volume for the jplayer library uses
     decibels to measure sound output. It passes in a float value and if the player is not null, the volume is divided by
     100 and then that number is plugged into the logarithmic function of log/log of base 10 * 20.
     */
    public void volumeControl(float volume) {
        //code for volumes slider
        currentVolume = volume;
        if (player != null) {
            float value = volume / 100.0f;
            float dB = (float) (Math.log(value) / Math.log(10.0) * 20.0);
            player.setVolume(dB);
        }
    }

    /**
     This method updates the current queue on the right side of the GUI. It clears the queue and allows for new songs to
     be added and played. It strips each song of its file extension and displays the correct name in the now playing
     JLabel.
     */
    private void updateQueue() {
        //code that updates the current queue
        songsToPlay.clear();
        for (File f : musicFiles) {
            String filename = f.getName();
            int index = filename.lastIndexOf(".");
            String displayName = filename;
            if (index > 0) {
                displayName = displayName.substring(0, index);
            }
            songsToPlay.addElement(displayName);
        }
    }

    /**
     * This method removes one or more songs in the current queue when the user right clicks with the use of a pop-up
     * JMenu."
     */
    private void removeSong() {
        int[] selectedIndices = songQueue.getSelectedIndices();
        for (int i = selectedIndices.length-1; i >=0; i--) {
            musicFiles.remove(selectedIndices[i]);
        }
        updateQueue();
    }

    /**
     * This method adds one or more songs from the playlists JList (middle most list) when the user right clicks on one
     * or more songs with the use of a pop-up JMenu."
     */
    private void addSong() {
        for (int index : playlistList.getSelectedIndices()) {
            String songName = playlistList.getModel().getElementAt(index);
            String filepath = db.getSongPath(songName);
            musicFiles.add(new File(filepath));
        }
        updateQueue();
    }

    /**
     * This method adds songs from the database into the selected playlist also with the use of a pop-up JMenu."
     */
    private void importSongToPlaylist() {
        updateQueue();
    }

    /**
     * The following methods show popup menus in all the JLists."
     * @param e
     */
    private void showPopup1(MouseEvent e){
        popupMenuCQ.show(e.getComponent(),
                e.getX(),e.getY());
    }
    private void showPopup2(MouseEvent e){
        popupMenuPL.show(e.getComponent(),
                e.getX(),e.getY());
    }
    private void showPopup3(MouseEvent e){
        playlistPopupMenu.show(e.getComponent(),
                e.getX(),e.getY());
    }
    /**
     * Main method.
     * @param args the command line arguments
     */
    public static void main (String[]args){
        /* Set the Nimbus look and feel */
        //<editor-fold default state="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        UIManager.put("Component.hideMnemonics", false); // This sets Mnemonics visible, because flatlaf defaults as hidden.
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    new FlatLightLaf().setup(); // This sets as light mode by default. Must keep this here.
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AMPGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AMPGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AMPGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AMPGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AMPGUI amp = new AMPGUI();
                amp.setVisible(true);
                amp.setMinimumSize(new Dimension(1000, 400));
                amp.setLocationRelativeTo(null); // Centers the application.
            }
        });
    }
    /**
     The runnable below is the main run method of the program. It looks at what songs are in the queue, how many, and if
     it is acceptable to play the next song. It is responsible for loading in the desired songs to the current queue by
     importing them from the user's library, file explorer, or wherever the music files are stored on the local machine.
     It also starts a timer, changes the name of the song being played and checks to see if the song has completed.
     */
    Runnable runnablePlay = new Runnable() {
        @Override
        public void run() {
            //while there are songs in the queue, play
            for (; musicFileIndex < musicFiles.size(); musicFileIndex++) {
                if (!playNextSong())
                    break;
            }
        }
    };

    private boolean playNextSong() {
        if (musicFileIndex < 0 || musicFileIndex >= musicFiles.size())
            return false;
        myFile = musicFiles.get(musicFileIndex);
        boolean played = false;
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    song.setValue((int) (totalLength - fileInputStream.available()));
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });
        timer.setRepeats(true);
        try {
            fileInputStream = new FileInputStream(myFile);
            totalLength = fileInputStream.available();
            BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream);
            player = new Player(bufferedInputStream);
            fileInputStream.skip(skip);
            playButton.setIcon(pauseIcon);
            String displayName = myFile.getName();
            int index = displayName.lastIndexOf(".");
            if (index > 0) {
                displayName = displayName.substring(0, index);
            }
            songName.setText(displayName);
            song.setMinimum(0);
            song.setMaximum((int) totalLength);
            timer.start();
            player.play();//This starts playing the selected music file
            played = player != null;
            stopPlaying(played);

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (JavaLayerException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            timer.stop();
        }
        //check if this is right
        songsToPlay.removeElement(musicFileIndex);
        return played;
    }


    // The inner class for Theme Mode selection with Action Listener.
    private class ThemeModeHandler implements ActionListener {

        // Process the theme selection.
        @Override
        public void actionPerformed(ActionEvent event) {
            // The process for color selection.
            for (int count = 0; count < themeItems.length; count++) {
                if (themeItems[0].isSelected()) {
                    FlatLightLaf.setup();
                    // create UI here...
                    updateUILater();
                } // Ends first if statement.
                else if (themeItems[1].isSelected()) {
                    FlatMacDarkLaf.setup();
                    // create UI here...
                    updateUILater();
                } // Ends second else if statement.
            } // Ends the for loop.
        } // Ends actionPerformed event listener.

    }   // Ends ThemeModeHandler inner class.

    /*
        Inner class Playlist to create a form.
        https://www.geeksforgeeks.org/java-swing-simple-user-registration-form/#
     */
    class AddNewPlaylist extends JFrame implements ActionListener {

        // Components for the form.
        private Container cont;
        private JLabel title;
        private JLabel lblId;
        private JTextField txtId;
        private JLabel lblPlaylistName;
        private JTextField txtPlaylistName;
        private JButton addPlaylistBtn;
        private JButton clrBtn;


        // The constructor.
        public AddNewPlaylist() {
            setSize(500,300);
            setResizable(false);
            setLocationRelativeTo(null);

            cont = getContentPane();
            cont.setLayout(null);

            title = new JLabel("Add a Playlist");
            title.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18
            title.setSize(300, 30);
            title.setLocation(185, 30);
            cont.add(title);

            lblId = new JLabel("ID:");
            lblId.setFont(new java.awt.Font("Helvetica", 0, 16)); // NOI18
            lblId.setSize(130, 30);
            lblId.setLocation(75, 100);
            cont.add(lblId);

            txtId = new JTextField();
            txtId.setFont(new java.awt.Font("Helvetica", 0, 15)); // NOI18
            txtId.setSize(200, 30);
            txtId.setLocation(200, 100);
            cont.add(txtId);
            txtId.setDocument(new JTextFieldLimit(31));


            lblPlaylistName = new JLabel("Playlist Name:");
            lblPlaylistName.setFont(new java.awt.Font("Helvetica", 0, 16)); // NOI18
            lblPlaylistName.setSize(130, 30);
            lblPlaylistName.setLocation(75, 150);
            cont.add(lblPlaylistName);

            txtPlaylistName = new JTextField();
            txtPlaylistName.setFont(new java.awt.Font("Helvetica", 0, 15)); // NOI18
            txtPlaylistName.setSize(200, 30);
            txtPlaylistName.setLocation(200, 150);
            cont.add(txtPlaylistName);

            clrBtn = new JButton("Clear");
            clrBtn.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18
            clrBtn.setSize(100, 30);
            clrBtn.setLocation(75, 200);
            clrBtn.addActionListener(this);
            cont.add(clrBtn);

            addPlaylistBtn = new JButton("Add Playlist");
            addPlaylistBtn.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18
            addPlaylistBtn.setSize(110, 30);
            addPlaylistBtn.setLocation(290, 200);
            addPlaylistBtn.addActionListener(this);
            cont.add(addPlaylistBtn);

            setVisible(true);

        }

        // Action method for the user buttons.
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == addPlaylistBtn) {
                DBTools buttonDB = new DBTools();
                buttonDB.addPlaylist(txtId.getText(), txtPlaylistName.getText());
                String clr = ""; // String as clear the text.
                txtId.setText(clr);
                txtPlaylistName.setText(clr);
                //TODO: update after change
            }

            else if (e.getSource() == clrBtn) {
                String clr = ""; // String as clear the text.
                txtId.setText(clr);
                txtPlaylistName.setText(clr);
            }
        } // Ends method actionPerformed.
    } //Ends Class Frame.

    /*
        Inner class AddNewSong to create a form.
        https://www.geeksforgeeks.org/java-swing-simple-user-registration-form/#
     */
    class AddNewSong extends JFrame implements ActionListener {

        // Components for the form.
        private Container cont;
        private JLabel title;
        private JLabel lblId;
        private JTextField txtId;
        private JLabel lblSongName;
        private JTextField txtSongName;
        private JLabel lblArtistID;
        private JTextField txtArtistID;
        private JLabel lblSongLength;
        private JTextField txtSongLength;
        private JLabel lblRelYr;
        private JTextField txtRelYr;
        private JLabel lblPath;
        private JTextField txtPath;
        private JButton addBtn;
        private JButton clrBtn;


        // The constructor.
        public AddNewSong() {
            setSize(500,500);
            setResizable(false);
            setLocationRelativeTo(null);

            cont = getContentPane();
            cont.setLayout(null);

            title = new JLabel("Add a Song");
            title.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18
            title.setSize(300, 30);
            title.setLocation(185, 30);
            cont.add(title);

            lblId = new JLabel("ID:");
            lblId.setFont(new java.awt.Font("Helvetica", 0, 16)); // NOI18
            lblId.setSize(130, 30);
            lblId.setLocation(75, 100);
            cont.add(lblId);

            txtId = new JTextField();
            txtId.setFont(new java.awt.Font("Helvetica", 0, 15)); // NOI18
            txtId.setSize(200, 30);
            txtId.setLocation(200, 100);
            cont.add(txtId);
            txtId.setDocument(new JTextFieldLimit(31));


            lblSongName = new JLabel("Song Name:");
            lblSongName.setFont(new java.awt.Font("Helvetica", 0, 16)); // NOI18
            lblSongName.setSize(130, 30);
            lblSongName.setLocation(75, 150);
            cont.add(lblSongName);

            txtSongName = new JTextField();
            txtSongName.setFont(new java.awt.Font("Helvetica", 0, 15)); // NOI18
            txtSongName.setSize(200, 30);
            txtSongName.setLocation(200, 150);
            cont.add(txtSongName);

            lblArtistID = new JLabel("Artist ID:");
            lblArtistID.setFont(new java.awt.Font("Helvetica", 0, 16)); // NOI18
            lblArtistID.setSize(130, 30);
            lblArtistID.setLocation(75, 200);
            cont.add(lblArtistID);

            txtArtistID = new JTextField();
            txtArtistID.setFont(new java.awt.Font("Helvetica", 0, 15)); // NOI18
            txtArtistID.setSize(200, 30);
            txtArtistID.setLocation(200, 200);
            cont.add(txtArtistID);

            lblSongLength = new JLabel("Song Length:");
            lblSongLength.setFont(new java.awt.Font("Helvetica", 0, 16)); // NOI18
            lblSongLength.setSize(130, 30);
            lblSongLength.setLocation(75, 250);
            cont.add(lblSongLength);

            txtSongLength = new JTextField();
            txtSongLength.setFont(new java.awt.Font("Helvetica", 0, 15)); // NOI18
            txtSongLength.setSize(200, 30);
            txtSongLength.setLocation(200, 250);
            cont.add(txtSongLength);

            lblRelYr = new JLabel("Year Released:");
            lblRelYr.setFont(new java.awt.Font("Helvetica", 0, 16)); // NOI18
            lblRelYr.setSize(130, 30);
            lblRelYr.setLocation(75, 300);
            cont.add(lblRelYr);

            txtRelYr = new JTextField();
            txtRelYr.setFont(new java.awt.Font("Helvetica", 0, 15)); // NOI18
            txtRelYr.setSize(200, 30);
            txtRelYr.setLocation(200, 300);
            cont.add(txtRelYr);
            txtRelYr.setDocument(new JTextFieldLimit(4));

            lblPath = new JLabel("File Path:");
            lblPath.setFont(new java.awt.Font("Helvetica", 0, 16)); // NOI18
            lblPath.setSize(130, 30);
            lblPath.setLocation(75, 350);
            cont.add(lblPath);

            txtPath = new JTextField();
            txtPath.setFont(new java.awt.Font("Helvetica", 0, 15)); // NOI18
            txtPath.setSize(200, 30);
            txtPath.setLocation(200, 350);
            cont.add(txtPath);


            clrBtn = new JButton("Clear");
            clrBtn.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18
            clrBtn.setSize(100, 30);
            clrBtn.setLocation(75, 400);
            clrBtn.addActionListener(this);
            cont.add(clrBtn);

            addBtn = new JButton("Add Song");
            addBtn.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18
            addBtn.setSize(100, 30);
            addBtn.setLocation(300, 400);
            addBtn.addActionListener(this);
            cont.add(addBtn);

            setVisible(true);

        }

        // Action method for user input.
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == addBtn) {
                DBTools buttonDB = new DBTools();
                buttonDB.addSong(txtId.getText(), txtArtistID.getText(), txtSongName.getText(),
                        txtSongLength.getText(), txtRelYr.getText(), txtPath.getText());
                String clr = ""; // String as clear the text.
                txtId.setText(clr);
                txtSongName.setText(clr);
                txtSongLength.setText(clr);
                txtRelYr.setText(clr);
                txtPath.setText(clr);
            }

            else if (e.getSource() == clrBtn) {
                String clr = ""; // String as clear the text.
                txtId.setText(clr);
                txtSongName.setText(clr);
                txtSongLength.setText(clr);
                txtRelYr.setText(clr);
                txtPath.setText(clr);

            }
        } // Ends method actionPerformed.
    } //Ends Class Frame.

    class ModPlaylist extends JFrame implements ActionListener {
        // Components for the form.
        private Container cont;
        private JLabel playlist;
        private JLabel library;
        private JButton addBtn;
        private JButton remBtn;
        private JList<String> libraryList;
        private JList<String> newPlaylistList;
        private final List<File> newMusicFiles = new ArrayList<>();
        private int newMusicFileIndex = 0;
        private JPanel scrollPane1;
        private JPanel scrollPane2;
        private String p_name;


        // The constructor.
        public ModPlaylist(String p_name) {
            setSize(600,600);
            setResizable(false);
            setLocationRelativeTo(null);

            this.p_name = p_name;

            cont = getContentPane();
            cont.setLayout(null);

            playlist = new JLabel("Selected Playlist");
            playlist.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18
            playlist.setSize(300, 30);
            playlist.setLocation(360, 30);
            cont.add(playlist);

            library = new JLabel("Library");
            library.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18
            library.setSize(300, 30);
            library.setLocation(100, 30);
            cont.add(library);

            addBtn = new JButton("Add Song to Playlist");
            addBtn.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18
            addBtn.setSize(160, 30);
            addBtn.setLocation(55, 500);
            addBtn.addActionListener(this);
            cont.add(addBtn);

            remBtn = new JButton("Remove Song from Playlist");
            remBtn.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18
            remBtn.setSize(230, 30);
            remBtn.setLocation(315, 500);
            remBtn.addActionListener(this);
            cont.add(remBtn);

            scrollPane1 = new JPanel();
            scrollPane1.setSize(200, 400);
            scrollPane1.setLocation(50, 100);

            scrollPane2 = new JPanel();
            scrollPane2.setSize(200, 400);
            scrollPane2.setLocation(300, 100);

            libraryList = new JList(db.getSongNames());
            scrollPane1.add(libraryList);
            cont.add(scrollPane1);

            newPlaylistList = new JList(db.getSongPlaylist(db.getPlaylistID(p_name)));
            scrollPane2.add(newPlaylistList);
            cont.add(scrollPane2);

            setVisible(true);
        }



        // Action method for user input.
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == addBtn) {
                db.addSongToPlaylist(db.getSongID(libraryList.getModel().getElementAt(libraryList.getSelectedIndex())), db.getPlaylistID(this.p_name));
                //TODO: update after change
            } else if (e.getSource() == remBtn) {
                db.removeSongFromPlaylist(db.getSongID(newPlaylistList.getModel().getElementAt(newPlaylistList.getSelectedIndex())), db.getPlaylistID(this.p_name));
                //TODO: update after change
            }
        } // Ends method actionPerformed.

    } //Ends Class Frame.

    /* Class created to make a character limit restriction.
       https://www.tutorialspoint.com/how-can-we-limit-the-number-of-characters-inside-a-jtextfield-in-java
       https://docs.oracle.com/javase/tutorial/uiswing/components/generaltext.html#filter
     */
    private class JTextFieldLimit extends PlainDocument {
        private int limit;
        JTextFieldLimit(int limit) {
            super();
            this.limit = limit;
        }
        JTextFieldLimit(int limit, boolean upper) {
            super();
            this.limit = limit;
        }
        public void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {
            if (str == null)
                return;
            if ((getLength() + str.length()) <= limit) {
                super.insertString(offset, str, attr);
            }
        }
    } //Ends JTextFieldLimit Class.


    // Variables declaration - do not modify
    private javax.swing.JMenuItem add;
    private javax.swing.JButton backButton;
    private javax.swing.JScrollPane backPanel;
    private javax.swing.JPanel backPanel2;
    private javax.swing.JMenuItem clip;
    private javax.swing.JMenu create;  // Changed from JMenuItem to JMenu.
    private javax.swing.JButton clearButton;
    private javax.swing.JMenuItem documentation;
    private javax.swing.JMenuItem about;
    private javax.swing.JMenu edit;
    private javax.swing.JMenuItem addPlaylist; // Added in add and remove playlist JMenuItems. 04282023 -ES
    private javax.swing.JMenuItem removePlaylist;
    private javax.swing.JButton fadeButton;
    private javax.swing.JMenu file;
    private javax.swing.JMenu help;
    private javax.swing.JMenu preferences;
    private javax.swing.JMenu theme; // changed to JMenu.
    private javax.swing.JMenuItem importSong;
    private javax.swing.JScrollPane scrollPane2;
    private javax.swing.JButton library;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu modify;
    private javax.swing.JButton nextButton;
    private java.awt.Label nowPlaying;
    private javax.swing.JButton playButton;
    private javax.swing.JMenu playMenu;
    private javax.swing.JList<String> playlist;
    private javax.swing.JList<String> playlistList;
    private javax.swing.JLabel playlists;
    private javax.swing.JLabel queueLabel;
    private javax.swing.JList<String> songQueue;
    private javax.swing.JMenuItem remove;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JMenuItem search;
    private javax.swing.JMenuItem selectAll;
    private javax.swing.JToggleButton shuffleButton;
    private javax.swing.JProgressBar song;
    private javax.swing.JToggleButton muteButton;
    private javax.swing.JLabel songName;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton addSongsButton;
    private javax.swing.JMenuItem tags;
    private javax.swing.JSlider volume;
    private javax.swing.JMenuItem newPlaylist; // added in JMenuItems for Import.
    private javax.swing.JMenuItem newTag;
    private javax.swing.JMenuItem newScreen;
    private javax.swing.JMenuItem newSong;
    private javax.swing.JMenuItem exit; // added in Exit JMenuItem
    private javax.swing.JLabel volumeUp;
    private javax.swing.JPopupMenu popupMenuCQ;
    private javax.swing.JPopupMenu popupMenuPL;
    private javax.swing.JPopupMenu playlistPopupMenu;
    // End of variables declaration
}

/**
 *  Next Years ToDos:
 *  - create new relative GUI
 *  - add logo
 *  - drag and drop
 *  - look into changing player (song time, pause, etc)
 */
